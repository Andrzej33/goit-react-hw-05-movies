{"version":3,"file":"static/js/134.3e686cff.chunk.js","mappings":"+SAEMA,EAAU,mCACVC,EAAM,gCAKCC,EAAW,mCAAG,qGAEDC,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,sCAAqCD,IAFzC,cAEnBI,EAFmB,yBAGlBA,EAAUC,MAHQ,2CAAH,qDAQXC,EAAS,mCAAG,WAAOC,GAAP,wFACCJ,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,iBAAgBM,EAAhB,oBAAmCP,IADzC,cACjBI,EADiB,yBAEhBA,EAAUC,MAFM,2CAAH,sDAMTG,EAAY,mCAAG,WAAOC,GAAP,gFACpBC,EAAa,IAAIC,gBADG,UAEFR,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,kBAAgDS,EAAhD,8CAAkG,CAACG,OAAQF,EAAWE,SAFzH,cAEpBR,EAFoB,yBAGnBA,EAAUC,MAHS,2CAAH,sDAOZQ,EAAgB,mCAAG,WAAON,GAAP,wFACNJ,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,iBAAgBM,EAAhB,4BAA2CP,EAA3C,oBADC,cACxBI,EADwB,yBAEvBA,EAAUC,MAFa,2CAAH,sDAMhBS,EAAe,mCAAG,WAAOP,GAAP,wFACLJ,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,iBAAgBM,EAAhB,4BAA2CP,EAA3C,2BADA,cACvBI,EADuB,yBAEtBA,EAAUC,MAFY,2CAAH,qD,qFC/BfU,EAAa,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACpBC,GAAWC,EAAAA,EAAAA,MACf,OACI,wBACCF,EAAOG,KAAI,SAAAC,GAAK,OAAG,yBAGpB,UAAC,IAAD,CAAYC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAtD,UAAmEG,EAAMK,MAAzE,IAAiFL,EAAMK,QAAUL,EAAMM,iBAAkB,iCAASN,EAAMM,eAAf,WAH5FN,EAAME,GAAlB,KAOxB,C,0HCkDD,UAxDgB,WAGZ,OAAwCK,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA2BC,EAAAA,EAAAA,UAAS,IAApC,eAAOd,EAAP,KAAce,EAAd,KACMtB,EAAQmB,EAAaI,IAAI,UAG/BC,EAAAA,EAAAA,YAAU,WAEV,GAAKxB,EAAL,CAEI,IAAMyB,EAAe,mCAAG,gHAEQ1B,EAAAA,EAAAA,IAAaC,GAFrB,oBAET0B,EAFS,EAETA,SACKC,OAHI,uBAIZL,EAAU,IAJE,mBAKLM,EAAAA,EAAAA,IAAM,yBAAD,OAA0B5B,KAL1B,OAOhBsB,EAAUI,GAPM,kDAShBE,EAAAA,GAAAA,MAAY,KAAMC,SATF,0DAAH,qDAYzBJ,GAdkB,CAgBjB,GAAC,CAACzB,IAmBH,OACI,iCACC,kBAAM8B,SAnBU,SAAAC,GACjBA,EAAEC,iBACF,IACEC,EADe,IAAIC,SAASH,EAAEI,QACRZ,IAAI,QAAQa,cACxC,GAA0B,KAAtBH,EAAWI,OAGX,OAAOT,EAAAA,EAAAA,IAAM,6BAGjBR,EAAgB,CAACpB,MAAOiC,IACtBF,EAAEI,OAAOG,OACV,EAOI,WACG,kBAAOC,KAAK,OAAOC,KAAK,UACxB,mBAAQD,KAAK,SAAb,uBAEHhC,IAAU,SAAC,IAAD,CAAYA,OAAQA,MAGtC,C","sources":["API/API.jsx","components/MoviesList/MoviesList.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'd1209b93bfca019c1d550689906b1b5c';\nconst URL = 'https://api.themoviedb.org/3/';\n// const URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\n// https://api.themoviedb.org/3/search/movie?api_key={api_key}&query=Jack+Reacher\n\nexport const fetchTrendy = async () => {\n \n  const ressponse = await axios(`${URL}trending/movie/day?api_key=${API_KEY}`);\n  return ressponse.data;\n};\n\n\n\nexport const fetchById = async (movieId) => {\n  const ressponse = await axios(`${URL}movie/${movieId}?api_key=${API_KEY}`);\n  return ressponse.data;\n};\n\n\nexport const fetchByQuery = async (query) => {\n  const controller = new AbortController()\n  const ressponse = await axios(`${URL}search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`,{signal: controller.signal});\n  return ressponse.data;\n};\n\n\nexport const fetchCreditsById = async (movieId) => {\n  const ressponse = await axios(`${URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n  return ressponse.data;\n};\n\n\nexport const fetchReviewById = async (movieId) => {\n  const ressponse = await axios(`${URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  return ressponse.data;\n};","import { StyledLink } from \"components/StyledLink/StyledLink\";\nimport { useLocation } from \"react-router-dom\";\n\n\nexport const MoviesList = ({movies}) => {\n  const location = useLocation();\n    return(\n        <ul>\n        {movies.map(movie=>(<li key={movie.id}\n      //    onClick={()=>getId(movie.id)}\n         >\n        <StyledLink to={`/movies/${movie.id}`} state={{ from: location }}>{movie.title} {movie.title !== movie.original_title && <span>:({movie.original_title})</span>}</StyledLink>\n        </li>))} \n      </ul> \n    )\n}","import { fetchByQuery } from \"API/API\";\nimport {useState, useEffect } from \"react\";\nimport { MoviesList } from \"components/MoviesList/MoviesList\";\nimport { toast } from 'react-toastify'\nimport { useSearchParams } from \"react-router-dom\";\n// import { Link } from \"react-router-dom\";\n\n\n\n const Movies = () => {\n\n   \n    const [searchParams, setSearchParams] = useSearchParams()\n    const [movies,setMovies] = useState([]);\n    const query = searchParams.get(\"query\")\n   \n\n    useEffect(()=>{\n        \n    if (!query) return;\n    \n        const getTrendyMovies = async () => {\n            try {\n                const {results} = await fetchByQuery(query); \n                if(!results.length){\n                    setMovies([])\n                    return toast(`We find nothing about ${query}`)\n                }\n                setMovies(results)  \n            } catch (error) {\n                toast.error(error.message);\n            }\n        }\n    getTrendyMovies();\n    // return ()=>{controller.abort()}\n    },[query])\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n    const searchName = formData.get('name').toLowerCase();\n    if (searchName.trim() === '') {\n        // toast.info('YOUR SEARCH QUERY IS EMPTY',{position: toast.POSITION.TOP_CENTER})\n        // setSearchValue(event.target.value);\n        return toast('Please enter your request')\n      }\n    //   console.log(searchName);\n    setSearchParams({query: searchName})\n      e.target.reset();\n    };\n      \n    \n     \n\n    return(\n        <>\n         <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"name\" />\n            <button type=\"submit\">Search</button>\n        </form>\n        {movies && <MoviesList movies={movies}/>}\n        </>\n    )\n}\n\nexport default Movies;"],"names":["API_KEY","URL","fetchTrendy","axios","ressponse","data","fetchById","movieId","fetchByQuery","query","controller","AbortController","signal","fetchCreditsById","fetchReviewById","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","title","original_title","useSearchParams","searchParams","setSearchParams","useState","setMovies","get","useEffect","getTrendyMovies","results","length","toast","message","onSubmit","e","preventDefault","searchName","FormData","target","toLowerCase","trim","reset","type","name"],"sourceRoot":""}