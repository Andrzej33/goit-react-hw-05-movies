{"version":3,"file":"static/js/336.1179c3df.chunk.js","mappings":"mTAEMA,EAAU,mCACVC,EAAM,gCAKCC,EAAW,mCAAG,qGAEDC,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,sCAAqCD,IAFzC,cAEnBI,EAFmB,yBAGlBA,EAAUC,MAHQ,2CAAH,qDAQXC,EAAS,mCAAG,WAAOC,GAAP,wFACCJ,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,iBAAgBM,EAAhB,oBAAmCP,IADzC,cACjBI,EADiB,yBAEhBA,EAAUC,MAFM,2CAAH,sDAMTG,EAAY,mCAAG,WAAOC,GAAP,gFACpBC,EAAa,IAAIC,gBADG,UAEFR,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,kBAAgDS,EAAhD,8CAAkG,CAACG,OAAQF,EAAWE,SAFzH,cAEpBR,EAFoB,yBAGnBA,EAAUC,MAHS,2CAAH,sDAOZQ,EAAgB,mCAAG,WAAON,GAAP,wFACNJ,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,iBAAgBM,EAAhB,4BAA2CP,EAA3C,oBADC,cACxBI,EADwB,yBAEvBA,EAAUC,MAFa,2CAAH,sDAMhBS,EAAe,mCAAG,WAAOP,GAAP,wFACLJ,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,iBAAgBM,EAAhB,4BAA2CP,EAA3C,2BADA,cACvBI,EADuB,yBAEtBA,EAAUC,MAFY,2CAAH,qD,2KCjCfU,E,QAAWC,GAAAA,GAAH,mP,SCwDrB,EAnDa,WACX,IAAQT,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAA4BW,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6FAChBF,GAAa,GADG,mBAGIT,EAAAA,EAAAA,IAAiBN,GAHrB,OAGRkB,EAHQ,OAINC,EAASD,EAATC,KACRN,EAAUM,GALI,gDAOdC,EAAAA,GAAAA,MAAY,KAAMC,SAPJ,yBASdN,GAAa,GATC,4EAAH,qDAYfE,GACD,GAAE,CAACjB,KAGF,gCACGc,IAAa,SAACQ,EAAA,EAAD,IACbV,EAAOW,QACN,SAACf,EAAD,UACGI,EAAOY,KAAI,SAAAC,GAAK,OACf,0BACGA,EAAMC,cACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,QAGb,gBACEF,IAAG,2DACHC,IAAKH,EAAMI,QAGf,wBAAKJ,EAAMI,QACX,wCAAgBJ,EAAMK,eAbfL,EAAMM,GADA,OAmBnB,yEAIP,C","sources":["API/API.jsx","components/Cast/CastStyled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'd1209b93bfca019c1d550689906b1b5c';\nconst URL = 'https://api.themoviedb.org/3/';\n// const URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\n// https://api.themoviedb.org/3/search/movie?api_key={api_key}&query=Jack+Reacher\n\nexport const fetchTrendy = async () => {\n \n  const ressponse = await axios(`${URL}trending/movie/day?api_key=${API_KEY}`);\n  return ressponse.data;\n};\n\n\n\nexport const fetchById = async (movieId) => {\n  const ressponse = await axios(`${URL}movie/${movieId}?api_key=${API_KEY}`);\n  return ressponse.data;\n};\n\n\nexport const fetchByQuery = async (query) => {\n  const controller = new AbortController()\n  const ressponse = await axios(`${URL}search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`,{signal: controller.signal});\n  return ressponse.data;\n};\n\n\nexport const fetchCreditsById = async (movieId) => {\n  const ressponse = await axios(`${URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n  return ressponse.data;\n};\n\n\nexport const fetchReviewById = async (movieId) => {\n  const ressponse = await axios(`${URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  return ressponse.data;\n};","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  li {\n    max-width: 200px;\n\n    background-color: silver;\n    p {\n      padding: 10px;\n    }\n    h3 {\n      padding: 10px;\n    }\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { fetchCreditsById } from 'API/API';\nimport { Loader } from 'components/Loader/Loader';\nimport { CastList } from './CastStyled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getActors = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetchCreditsById(movieId);\n        const { cast } = res;\n        setActors(cast);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getActors();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {actors.length ? (\n        <CastList>\n          {actors.map(actor => (\n            <li key={actor.id}>\n              {actor.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              ) : (\n                <img\n                  src={`https://via.placeholder.com/200x300?text=Image+not+found`}\n                  alt={actor.name}\n                />\n              )}\n              <h3>{actor.name}</h3>\n              <p>Character : {actor.character}</p>\n            </li>\n          ))}\n        </CastList>\n      ) : (\n        <p>We do not have any information about actors</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","URL","fetchTrendy","axios","ressponse","data","fetchById","movieId","fetchByQuery","query","controller","AbortController","signal","fetchCreditsById","fetchReviewById","CastList","styled","useParams","useState","actors","setActors","isLoading","setIsLoading","useEffect","getActors","res","cast","toast","message","Loader","length","map","actor","profile_path","src","alt","name","character","id"],"sourceRoot":""}